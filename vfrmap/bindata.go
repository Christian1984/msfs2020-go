// Code generated by go-bindata.
// sources:
// html/index.html
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _indexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x5b\x5b\x93\xdb\xb6\x92\x7e\xcf\xaf\x40\x70\x2a\x65\xa9\x42\x41\xbc\xea\x66\x49\x27\x8e\x2f\x49\x76\xc7\xb1\xcb\x9e\x24\xb5\x1b\xa7\x54\x10\x89\xa1\x78\x06\x04\x58\x04\x34\x9a\xf1\xd4\xfc\xf7\x2d\x80\xa4\x04\x90\x9c\x8b\x7d\x1e\x4e\x36\x0f\x19\x11\xe8\xfe\xfa\x82\x46\x37\xd0\xa4\x97\xdf\xbe\x7a\xf7\xf2\xfc\x7f\xde\xbf\x06\x3b\x99\xd3\xf5\x37\xcb\xea\x0f\x00\xcb\x1d\xc1\x89\xfa\x01\xc0\x52\x66\x92\x92\x75\x2e\x2e\x84\xef\xfa\xee\x28\xe5\xe3\xab\x8b\x32\xc7\xc5\x72\x5c\xcd\x54\x54\x34\x63\x97\xa0\x24\x74\x05\xb3\x98\x33\x08\xe4\x4d\x41\x56\x30\xcb\x71\x4a\xc6\x05\x4b\x21\xd8\x95\xe4\x62\x05\x13\x2c\xf1\xe2\x38\xfa\x7c\x8b\x05\x99\x84\x4e\xf6\xfb\x8f\xef\x3e\x1c\xdc\xff\xfe\x29\xe5\x2b\xd8\x01\x14\xf2\x86\x12\xb1\x23\x44\x36\x28\x94\xe0\x0b\x4a\xe4\xbf\xc4\xb8\xfe\x85\x62\x21\x20\x18\xd7\xac\x39\x91\x18\x30\x9c\x93\x15\xc4\x45\x41\xc9\x28\xe7\xdb\x8c\x92\xd1\x81\x6c\x47\xb8\x28\x46\x31\x2e\xf0\x96\x12\x08\x62\xce\x24\x61\x72\x05\x6f\x88\x80\x4f\x64\x16\x12\xcb\xbd\x18\x6d\x71\x39\xd2\x8a\x19\x28\x5b\x8a\xe3\xcb\xa7\xe2\x68\xe7\x19\xcc\xbf\xbf\xf9\xf0\x16\x17\x0d\xb7\x88\xcb\xac\x90\x40\x94\x71\x9f\xb5\xff\x12\x70\xbd\x1c\x57\x34\x4f\x62\x28\xb9\xc4\x92\x24\x6f\x71\x79\x49\xca\x5e\x76\x65\x4a\xbd\x68\x92\x5c\xcb\xb1\x72\x68\x35\x07\x74\x70\x38\x60\xcb\x93\x1b\x70\x5b\x0f\x01\xb0\x23\x59\xba\x93\x0b\xe0\xb9\xee\x77\xcf\x8f\xa3\x39\x2e\xd3\x8c\x2d\x80\x7b\x1a\x2a\x70\x92\x64\x2c\x35\xc6\xee\xbe\xa9\x7f\xb4\x20\x93\x4c\x14\x14\xdf\x2c\xc0\x05\x25\xd7\x27\x00\xf5\x34\x4a\xb2\x92\xc4\x32\xe3\x6c\x01\x62\x4e\xf7\x39\xeb\x80\xfd\x23\xc7\x85\x01\xb6\xc5\xf1\x65\x5a\xf2\x3d\x4b\x46\x31\xa7\xbc\x5c\x80\xb4\xc4\x37\x2d\xd4\xb4\xe4\x87\x05\xf0\xba\x58\xbb\x2c\x21\xa3\xdd\x3e\x31\x00\x0b\x2e\xb2\x4a\x01\xbc\x15\x9c\xee\x25\x39\x81\x49\x5e\x58\x36\x53\x72\x21\xad\x81\xcf\xa3\x8c\x25\xe4\x7a\x01\xbc\xb0\xcf\x33\x28\x22\xf9\x69\xbc\xd6\x57\x87\x93\xa1\x30\x67\x72\x24\xb2\xcf\x64\x01\x3c\x93\x5a\x8f\x1f\xea\xd5\xd8\x72\x9a\x3c\x06\x14\xef\x4b\xa1\x86\x0b\x9e\x31\x49\xca\x93\xf1\x2d\xdb\x17\x3b\x7e\x45\x4a\xc3\x03\x35\xdc\x61\x97\x9d\x6c\x37\x5c\x66\x7b\xab\xb1\xcd\xd2\x55\x85\xd6\x08\xd3\x2c\x55\xcb\x48\x4c\xe9\xfd\xe8\xb6\xd5\xb6\x97\xba\x0b\x6c\xd9\x69\x2b\x26\x0a\xcc\xd0\x45\x46\x68\x8f\x8e\xa3\xb2\xf2\x9d\xb5\x0a\x77\x1d\xee\x2b\x4c\xf7\xc4\xe0\x36\x34\xf3\x91\xfb\x28\xe7\x46\xe4\x98\xd2\x7e\x7e\xcf\xe4\x3f\xe9\x55\x47\x11\xf2\x7a\xc0\x25\xa1\xa4\xe0\xa5\x1c\x15\xbc\xd8\x17\xa0\xe8\x71\xbd\x8b\x7c\x13\xb5\x67\x6b\xde\xbf\x1c\xf7\xcb\xa1\x78\x4b\xe8\x43\x4e\xf4\xdb\xda\x2e\xc7\x3a\xbb\xac\xbf\x31\x33\x55\x93\x5b\xe0\x5e\x10\x20\x64\x99\xc5\x12\x3e\x6f\x96\x8c\x12\x09\x76\xfb\x63\x20\xab\xc7\x1c\x17\xf6\xa3\xca\x64\xdd\x91\xf3\x5a\xdd\xee\xcc\x2f\x31\x67\xe6\xa8\xb6\xc7\x1c\x38\x08\x6b\x9a\x62\x46\x36\x1d\xa2\xc6\x1d\xdd\x99\x0b\x4e\x29\x3f\x6c\x34\x1f\x58\x81\x0b\x4c\x05\x31\xe7\x29\x16\x72\x53\x6a\x66\xb0\x02\xb7\x77\xe6\x9c\xb8\x4a\xdf\x2b\x3e\xa5\xe3\x47\x59\x66\x2c\x05\x2b\xf0\x6c\xf9\xcf\xeb\x9c\x82\x2b\x52\x8a\x8c\xb3\x15\xf4\x90\x0b\x01\x61\x31\x57\xee\x5e\xc1\xdf\xce\xdf\x8c\x66\x10\x08\x89\x59\x82\x29\x67\x64\x05\x19\x87\xff\x5c\x2f\xc5\x55\x0a\xae\x73\xca\xc4\x0a\xee\xa4\x2c\x16\xe3\xf1\xe1\x70\x40\x87\x00\xf1\x32\x1d\xfb\xae\xeb\x8e\xc5\x95\xaa\xc7\x3a\x63\xac\xa0\x1f\xce\xd1\x2c\x84\xe0\x90\x25\x72\xa7\x1e\x67\xc8\x8f\xa0\x2d\x76\xad\xab\x99\xaa\xdd\x20\x4b\x56\xb0\x79\x98\xc3\xf1\x7a\x59\x60\xb9\xd3\xa3\xea\x47\x34\xf5\x43\x08\x92\x15\x7c\x0b\xfc\x70\x8a\x22\x2f\x74\x43\xc7\x8b\x7c\x14\xba\xfe\x64\x02\xbc\x60\x8e\xdc\x68\x3a\xf3\x9c\xa9\x87\x66\xae\x3b\x0f\x27\x20\x06\x2e\x9a\xb9\xfe\x64\xe6\x8c\x3c\x1f\x85\x91\x37\x0b\x23\xe0\xa1\xc0\x0f\xa7\x81\x33\x0a\x5d\xe4\x47\x13\xc5\xeb\xa2\x59\x14\x2a\xaa\x30\x42\xa1\x37\x8d\xe6\x73\x30\x0a\xd0\x3c\x74\x83\xd0\x19\x85\x01\xf2\x27\x93\x70\xe2\x83\x51\xe0\x21\x3f\x70\xbd\x99\x33\xf2\x43\x34\x09\x5c\xcf\x9b\x07\x7a\x34\x9c\x05\x41\xe4\x8c\x22\x14\xf8\x6e\x30\x99\x82\x91\x8b\xdc\xc9\x3c\x70\x22\xe4\xcf\xbc\x60\xe2\x81\x91\x87\x5c\x2f\x72\x7d\x27\xf0\x51\x34\x9f\x05\xb3\x99\x1a\xf2\xdc\x70\xea\x39\x91\x8b\x66\xc1\x64\xe2\xfb\xe0\x4c\x85\xf8\x2c\xf4\xa7\xde\xd4\xf1\xa2\x10\x05\xd3\x68\xe2\x03\xd7\xf1\x66\x2e\xf2\xe6\xd1\x34\x02\x14\x78\x9e\x8b\x22\xd7\x8d\x66\xce\x28\x72\x51\x38\xf3\x83\x39\x08\xd0\x7c\x1e\x04\xbe\x33\x73\x91\x3f\xf7\x26\x4a\x27\x1f\xb9\xa1\x1f\x4d\xa6\x8e\xef\xa3\x79\x30\xf3\x26\x4a\x27\xdf\x0d\x66\x61\xe4\x78\x13\x34\x9b\x4f\xe6\x01\x08\x7d\xa4\x64\x4d\x7d\x67\xe4\x79\x28\x9a\x47\xda\x17\xae\x3b\x73\x5c\xe4\x05\xf3\x48\x11\x4c\xbd\xc0\xf3\x1c\xcf\x45\x73\x6f\x36\x9d\x2b\x94\xc8\x9d\xfb\x73\x67\xa4\x50\x66\xbe\x57\x09\x0b\xa3\x60\x1a\x3a\x23\xdf\x47\xc1\x7c\xee\x06\xc0\x47\x13\xcf\x0b\x7c\x67\x34\x73\x51\x10\xf9\x6e\x04\x3c\xcf\x43\x41\x34\x9f\x47\x4e\x38\x43\x91\x3b\xf1\x3c\x85\x35\x0d\xc2\xb9\xe2\x8b\xd0\x74\xea\xcf\x23\xf0\x19\x82\x8b\x8c\xd2\x51\xb9\xa7\x64\x05\xc9\x15\x61\x3c\x49\xaa\xb1\x15\xdc\x6c\x5e\xbe\x3b\x7b\xf7\x61\xb3\x51\xb1\xa1\x22\x6d\xfd\xec\x9b\xf6\xb6\x52\x61\xfe\xa3\xca\xd5\x60\x05\xce\x90\x3a\x2f\x0e\x4e\xf9\x44\x3d\xfe\x56\xd2\x45\x15\xea\xe4\xb7\x0f\xbf\x0c\xcc\x53\xa3\xb8\x4a\xbf\xbf\xce\xa9\x03\xc1\xf7\x3d\xdb\x66\x88\x4a\x52\x50\x1c\x93\x01\xfc\x07\x74\xe0\x77\x7e\x00\x8d\xa1\x93\x6e\x0e\xa8\x0f\x6b\x43\xc7\x12\xfc\x51\xa7\xe3\x3f\x27\xa1\x03\x26\xe1\x5f\xcd\xdc\xdd\xb0\x93\x19\x94\xc8\x3f\x54\xa5\xfa\x4f\x9a\xa0\x4b\xe5\xbf\x65\xc2\x4f\x25\x21\xec\x3f\x69\x42\xaa\x14\x78\xba\x09\xf5\xcf\x84\xc7\xfb\x9c\x30\x89\x38\xbb\x24\x37\xfb\x42\xe5\xdb\x3d\xd3\xc7\xc3\x81\x8a\x47\x39\x34\x0a\x14\xc8\x2e\x40\x35\x8a\x2e\xc9\x0d\x58\xad\x56\x00\xbe\x16\x31\x2e\x08\x1c\x1a\x54\xea\x10\x97\xa6\x94\x6c\xaa\x44\x3e\x18\x9e\xca\xe4\xb1\x1a\x1e\xcf\x14\x8d\x34\xc0\x0b\xc2\x36\x19\xdb\xa4\x9c\x2b\xde\x1c\x17\x62\x60\x0a\xbf\xc2\x25\xd8\x97\x14\xac\x80\x4e\xc6\xa2\xce\xc6\x15\x39\x8a\x79\x3e\x56\x2c\xe3\x1f\x94\x23\x8d\x0a\x81\x28\x96\x99\xdc\x27\x04\x7c\x0f\xa0\xd3\x99\xe4\x2c\xb5\x67\x73\x5c\xa0\x94\xc8\xff\xe5\x3c\x1f\x0c\xd5\xe8\x67\x78\x54\xe1\x90\xb1\x84\x1f\x90\xd2\x74\xb0\x2f\xa9\xf3\x6c\xb3\xa5\x98\x5d\x3e\x1b\x76\x4e\x4a\x47\xab\xf6\x45\x82\x25\x79\x8b\x8b\x41\x2e\x52\xcb\x97\xda\xa0\x82\x0b\x1d\x33\x14\xcb\x33\x96\x2a\x9a\xa3\xbe\x0e\xd0\x4f\x8d\x82\xa6\x13\xeb\x3a\x8c\x04\x91\x67\x15\x63\xc1\xc5\x3d\x04\x1f\xd4\x7d\x25\xe3\xec\x05\x4b\x29\xd1\x02\xd4\x85\x54\x85\xd6\x31\x06\xd4\x7f\x46\x91\x46\x05\x17\x28\x63\x4c\x1d\x01\xae\x55\x85\xfd\x75\x9f\x6f\x49\xa9\x64\x28\xe5\x86\x48\xf2\x37\xd9\x35\x49\x06\x93\xe1\xd1\x6b\x26\x89\x8a\xda\x13\x89\xa9\xd5\x78\x6c\x8a\x49\x95\xab\xb5\x9c\x9f\xcf\xdf\x9e\xa9\x75\x5d\xe2\xea\x56\xfa\xe9\xf1\x15\xae\x95\x39\x2a\x50\x4b\x7e\x60\x19\x3f\xc1\x75\x85\xa4\xe6\xc4\x72\x8c\xd7\xd0\xf2\x80\x8a\x6d\xf3\xe4\x61\x2f\x16\xd0\x88\x05\x66\xe7\xbc\xe3\xec\xbb\xd6\x49\xaf\x3f\x06\x7e\xfe\xed\x55\x3b\x06\x76\xfb\x04\x61\x5a\x2d\xb7\xe5\x71\xb5\x4c\xcd\xc4\x73\x8b\xbc\x5e\xbc\x0e\x75\x3d\x6e\x13\xe3\xac\x14\x05\x21\x49\x17\xbb\x9e\xb0\xc9\xaf\x48\x29\xb3\x18\xd3\x4d\x3f\x93\x3d\xdd\x2f\x69\x23\xcb\xbd\x6d\x0a\x1c\xe8\xe5\x30\x84\x6a\x1a\xb5\x24\x43\x68\x83\x5c\x50\x5c\x88\x8e\x58\x3d\x6a\x13\xca\x32\xcb\x3b\x74\x6a\xd0\x26\x2b\xf7\x49\x42\xca\x4d\x2f\xb5\x31\xd7\xd9\xbc\x07\xb5\x27\x19\x39\x80\x3f\xc8\xf6\x23\x8f\x2f\x89\x1c\xc0\x83\x8a\x46\x65\x49\x9d\x03\x28\x8f\xf5\xb6\x42\x3b\x2e\x24\xc3\xb9\x36\x68\xd1\x47\xa0\x8f\xa9\xdf\x03\x38\x3e\x08\x78\x0c\x9b\x83\x40\x9c\xa9\x3c\x62\xe6\x5b\x33\x34\xc6\xe3\x98\x33\xc1\x29\x41\x94\xa7\x4a\xbc\xce\x8f\x27\x80\x3b\x0b\x29\xa6\x5c\x90\xa7\x43\x69\xf2\xfb\xb0\x72\x22\x04\x4e\x2d\x34\xd2\xce\xc3\xb9\x50\xc7\xea\xff\xfa\xf8\xee\x57\x54\xe0\x52\x90\x01\x41\xaa\xa4\x19\xbb\xa2\x2b\x54\x11\x40\x9d\xd4\x0c\x32\xfb\x28\x9f\x8b\xd4\xd8\x92\xf6\xb6\x31\x26\xd4\x4e\xcd\x71\x01\xbe\x5d\xad\xc0\x9e\x25\xe4\x22\x63\x24\xb1\xb7\xab\x9d\x76\x4f\xf2\xee\x4e\x26\xb7\x77\x69\xc6\x32\xa9\x18\xda\xb6\xb6\x52\xb4\x3a\x81\x4f\xfd\xa9\x33\xf2\xd0\x34\xf2\x03\x53\x2f\x45\xcd\x45\x5e\x07\xcf\x19\x3a\xcf\x28\x39\xc3\x37\xa4\x1c\x34\xd7\x87\x5b\x71\x87\x64\x46\x89\x2e\x21\x42\x96\x84\x48\x95\x56\xd4\x75\xe2\xf6\xf3\xdd\xf8\xf6\xfa\x6e\x7c\x7b\x73\x87\x0a\x96\x42\xc7\xb2\x27\xc7\xd7\x2a\x95\x2d\x80\x37\x73\xcc\xe1\x8c\x55\xc3\xbe\x39\x7a\xc1\xcb\x1c\xcb\x05\x30\x7a\x86\xe6\xb4\xd8\x6f\x13\x9e\xe3\x8c\x89\x05\xf8\x13\x62\x7d\x82\x53\xff\x8b\xe1\x5f\x27\x3f\x19\x3e\xd3\x66\x15\x84\xe1\xac\xd8\xc4\x38\xde\x91\x64\xb3\xc5\x82\xa8\x15\x78\x82\xa5\x2a\xd9\xa2\x9a\x1d\x31\x22\xc7\x29\xe1\x07\xb2\xd5\x40\x63\x41\xca\xab\x2c\x26\x63\x99\x8b\xb1\x87\x5c\xe4\x8e\x1b\x41\xb5\x84\x1f\x5e\xbf\xff\xf8\xd3\x77\xc1\x8b\xb9\xeb\xce\xbd\xe0\x87\x82\x3d\xdd\x51\x61\xaf\xa3\xac\x51\x99\x8b\x05\x50\xd9\xc8\xb1\x8a\x54\x42\x24\x89\xe5\x07\x22\x33\x86\xbb\xf3\xa6\xfb\xa0\xe7\xc3\x2f\xf0\xbc\x2c\x31\x13\x05\x2e\x09\x93\x15\xee\xbd\xfe\x16\x12\xe7\x84\x6d\xf4\xc9\x7a\x73\xa8\x4f\xc7\x8f\xfa\xba\xe2\xd2\x95\x52\x72\x46\xca\xbf\x79\x50\xd5\x46\x4a\x52\x96\x38\x63\x5f\x6a\x60\xc5\xf5\xff\xc3\xc4\x03\x96\xa4\xfc\x42\x03\x35\x8f\x6e\xc7\xfd\xcd\x6d\x8c\x71\x29\xf9\x26\xc1\xe5\xe5\x7d\x16\xaa\xda\xa9\xa9\x92\xed\xa8\xde\xd8\x62\xa4\x6c\x4e\x29\xdf\x62\x8a\x84\xa0\xe8\x02\x0b\x49\x6f\x74\x86\x50\x50\x1b\x4c\xe9\xdf\xd8\x6e\xa3\x15\x78\xca\x82\xaa\x7a\xc0\x1c\x17\x2d\x3d\xa9\x72\x84\xc2\xd5\xc5\xe1\x2f\x53\x6c\xd5\x29\x5c\xa8\x1a\x63\x0e\x7f\xae\xcc\x72\xcd\x31\x2c\x65\x99\x6d\xf7\xaa\x54\xbd\xe4\x4c\x96\x9c\x2e\xaa\xce\x98\xa5\x9f\xb5\x30\x15\x8b\x2e\x5e\x71\xc5\x82\x0c\x94\xc1\xed\xa9\x0d\x0f\xb7\x5c\x4a\x9e\x53\x72\x21\xa1\x69\x66\x45\x8e\x70\x92\xbc\x30\x18\xef\x39\xa7\x77\x6b\x5a\xcc\x8b\x1b\xdd\xcc\xfc\x04\x81\xc4\x65\x4a\xe4\xea\x13\xac\xee\x4c\x9f\x20\xd0\xad\xcc\xd5\x27\xf8\x09\xae\xdf\x15\x44\x5d\x78\x09\x51\x15\x58\x1f\xcd\xff\x1d\x25\xea\x4a\xf3\x98\x50\x45\xfa\xe2\x97\xf7\x5f\x25\x6e\x31\xd6\x77\x11\x63\xbf\x3e\x26\xed\xa3\xa6\xfc\x6a\xdb\xf4\xf6\xd1\x79\xe1\x31\x41\x2f\x15\x65\x5b\x4e\x8f\xc0\x73\xae\x0e\x51\xed\x98\x51\xdb\xf3\x2d\x2e\xd4\x91\xc7\xbe\xfe\x40\x6b\x8d\xe0\x42\x05\xb3\x63\x53\x54\x26\x82\xf3\x2a\x33\xc3\x45\x2b\xc1\xdf\x43\xad\x0a\xd5\x89\xd6\xa8\x78\xfd\xf4\x7f\xa8\xb4\x78\xa2\xd7\x59\xb2\x45\xa9\x3d\x00\x5e\xa9\x84\x34\xf8\x55\x85\x1f\x78\xcb\x13\x32\x84\x0b\x23\x55\x9d\x58\x9a\xd3\xaf\x7d\xde\xb9\x22\x25\xc5\x37\xfd\x9e\xf8\x15\x5f\x65\xa9\x3e\xdc\x63\x0a\x5e\xa9\x63\xed\xe2\x9e\x03\x52\x57\x0a\x00\xc6\x6e\xac\x32\xc3\xa0\xf1\xb9\x63\x8a\x1d\xf6\xaf\x51\x75\xb1\xd7\x7b\xba\xfa\xa9\x6e\xa3\x76\xbe\xc9\x62\xb5\xa5\xed\xf6\xa0\xe9\xa1\xd2\xec\x08\x2c\x80\xdb\x37\xf7\xae\xcc\xf4\x1b\x0e\x58\x65\x28\x23\x57\x9a\xe9\xa1\xee\x32\x98\x8a\xb6\xa6\xb6\x19\x4b\xde\xab\xdb\xfe\xe0\x0c\xe9\x5b\xff\xe0\x16\xef\x25\x7f\x8f\x59\x9d\xbd\xee\x86\xad\x2e\x86\x7a\x7c\x59\xbd\xc9\x1d\x98\xdd\x02\x95\x9c\x87\xed\x68\xad\xa4\xbc\xb7\x4f\xe8\xae\xe3\x76\x14\x69\x5e\x66\x98\x8e\x3b\x32\x3b\xe0\xb6\x6b\x55\xc3\xf1\x80\x75\x47\x92\x27\x5a\xd9\x98\x65\xbf\xf9\x38\x5a\xd6\x80\x0b\x22\x37\x47\x92\xb6\xae\x76\x2c\x14\x88\xb3\xc1\xb3\x98\x66\xf1\xe5\x33\xe7\x9e\xfb\x5a\x3f\x20\x51\xde\xa2\xcc\xba\x1b\x59\x06\x56\xd0\x2a\x34\x75\x94\xc6\x3b\xcc\x52\xf2\x80\x10\xdd\x1a\x44\xfa\x26\xbc\x5a\xdd\xbf\x07\xbb\x5d\x95\xa6\x51\xa5\x62\x75\x60\x77\x84\xed\x2e\x0b\x20\x54\x90\xb6\x1c\x2b\x8b\x3c\x15\x5c\xf7\x6a\xfb\xc0\x9f\xc6\xae\x77\x54\x6f\x07\xc8\x74\x62\xb7\x17\xd8\xb7\x0e\xf5\x2a\x18\x92\x5b\xb1\x75\xda\x1d\x9d\x05\x6b\xc5\x51\x5a\x88\xfa\xcd\xea\x0a\x54\xb4\x6a\x8d\x8f\xad\xb8\xd9\xd0\xe8\x80\x56\xb3\x2c\x35\x66\x9f\x5b\xf7\x6b\xb3\x49\xda\x74\xa2\x6c\xf7\xb6\xa4\x1f\xfb\x58\x27\x15\xba\x08\x3d\x17\xf1\x8e\x97\x8e\xb8\x3b\x52\x92\x56\x23\xe3\x74\x1f\x6f\x79\x29\x3d\x7a\xa9\x75\x38\x35\x3a\x15\x42\x77\xd4\xb3\x8b\x9b\x81\x61\x45\x2b\xb5\xcb\x9b\x82\xc0\x05\x80\x8d\x12\xb0\x55\x5a\x28\x96\x70\x01\x74\xcf\xe3\x0d\xe5\xb8\xb3\x97\x8f\x6b\x80\x44\x41\x33\x39\x80\x0e\x1c\xfe\xe9\xfe\x35\x6c\xc3\xb0\xf4\xcb\x61\xbc\x0e\x4c\xe3\xd6\x07\xb1\xec\x85\x51\x41\xe0\xa2\xc8\xe9\x0d\xde\xa1\xf9\x09\xc1\xa9\x7b\x63\xb7\x50\x0e\x02\x09\xc2\x12\x6b\xb4\x67\x15\xed\x37\x00\x86\x9f\x1f\xee\xb3\x9a\x29\xbf\xa2\xb2\xbb\x89\xd5\x58\x45\x66\xb4\x0f\x7b\xf6\xef\x63\x48\x09\x67\xcf\x9a\x77\xcd\x5d\xbc\xe3\xaf\xd6\xcb\xe8\x6f\xcd\xe7\xfb\xcd\xdf\x65\x09\xd9\xec\xf6\x89\x65\xb9\x0e\xc8\xdd\x3e\x01\xab\xd3\x6b\x97\x94\xc8\xd7\x94\xa8\x9f\x3f\xde\xfc\x92\x0c\xe0\x6e\x9f\x98\xe7\x36\xdd\xc7\xd4\x87\x3b\x54\x7f\xd2\xa3\x54\x67\xdc\x52\xf6\x51\xcc\xfa\x2b\x94\x2f\x04\xbe\xeb\xbc\x23\xc2\x49\xf2\xfa\x8a\x30\x79\x96\x09\x49\x98\xba\xdd\xbd\x7a\xf7\xb6\xae\x6a\x67\x1c\x27\x24\x81\xce\x03\xaf\x8f\x8c\x15\x69\x1d\xaa\x54\x09\x5c\xdc\x6f\x80\x66\xac\x3e\x9b\x80\xd6\x1e\x28\xb8\x78\x1a\xdb\xa8\xe0\xc2\x66\x4d\x73\x5c\x3c\x91\x57\x91\xda\xcc\x55\x10\x3c\x91\xbd\x22\x36\x01\xee\xee\xcb\xe1\x5f\xe6\x16\xfb\x83\x12\x5b\x43\xb1\xdf\xe6\x99\x7c\x32\xf3\xa8\xa2\x6f\xb9\xa8\x78\xc8\xbb\x2d\x80\xb4\x68\x39\xb8\xc9\x3b\x4f\x87\x38\xa6\xb3\x7e\x57\x55\x51\x7e\xfb\x65\x22\x1a\x92\x8d\xce\x7e\xb6\x86\xf5\x3b\x93\x07\xb8\x6b\x8a\x3e\xe6\xe6\x6d\xc6\x43\xb2\x9b\x17\x1e\x0f\xb0\xeb\x97\x21\x4f\xc1\x50\x74\x7d\x40\xf6\x5b\x99\x07\x90\x6c\xc2\x3e\x28\xfd\xa6\xe5\x01\x04\x3d\xdf\xc7\x28\xcb\x2c\x7f\x68\x99\xcb\x2c\xef\x63\x33\xde\xc1\x3c\xc0\x6d\x50\x75\x41\xee\x8c\xe3\xf0\xbd\x2f\x9d\x8f\x9d\xfd\x63\x66\xab\x7f\x99\x5f\x6e\x2e\xc7\xcd\x87\xba\xcb\x2d\x4f\x6e\xea\x8f\x39\x93\xec\x4a\x7f\x91\xa3\xb2\x67\xf3\x9d\xd5\x52\x14\x98\x81\x98\x62\x21\x56\x50\x7f\x08\x07\xd7\x2f\x8e\xd1\x50\xcd\x2a\x9e\xd6\xf2\x37\x1c\xd5\xd3\xda\x5d\x8e\x15\xe5\xba\x87\xde\x58\x6a\x8b\xa9\xfa\xee\xed\xc4\x0a\xea\xbf\x0f\xe9\x75\xdc\x21\x86\x1c\x7b\x4b\xdc\xa7\xd7\xa3\xd8\x3f\x37\xdb\xe7\x04\x6d\xef\x97\xaf\x46\xfe\x1d\x7d\x6c\x3b\xb3\x37\x7a\xbf\x5a\xc0\x9b\x2a\xd2\x4f\xf0\x66\x68\x7f\x35\xea\xb9\x0e\xe4\x13\xa8\x11\xb2\x5f\x8d\xf9\x01\xb5\x51\xbb\xfb\xe1\x09\xe0\xcb\x71\x92\x5d\x35\x1f\x28\x1f\x57\xab\x39\x17\x00\xce\xf4\x1d\xb2\x1a\xaa\xce\x2d\xcf\xe1\x5a\x3d\xa8\xac\xdb\x00\xd9\x5b\x42\x15\xc5\x75\x8d\x7b\x9a\xa9\x1a\x51\xb0\xf9\xfe\x58\x1d\x28\x9e\x9f\x76\x4e\xc3\x6b\x16\xf4\xf5\x71\x9f\x2e\x8b\xf5\x72\x17\xb4\x09\x74\xe9\x5e\x2f\xc7\xbb\x60\xbd\x1c\x17\x36\xf5\x76\x2f\x25\x67\x1d\x0e\x5d\xb0\x4f\x46\xf5\x7e\x59\xf2\xbc\x6a\x00\x82\x8c\x01\xeb\xb3\x80\x0a\xf2\xc9\xa2\xea\xe2\x7e\x12\xd6\xce\x42\x4a\xf5\x2e\xa6\xe9\x37\xc3\x2f\xad\x8a\x6e\x6b\x50\x7d\x2e\x7a\xc1\xcb\x36\x9d\xae\xbd\xeb\x9f\xde\x7f\x5c\x2c\xc7\x9a\x68\xbd\xcc\x58\xb1\x97\xc6\x47\xe8\xb0\x07\xbe\x62\xeb\x18\x7a\xbf\x18\x4c\xa5\x91\x51\xbe\x4c\xd6\xb1\xb6\xdf\xeb\xd9\x0a\xa0\x7a\xe8\x85\xa8\x8f\x28\x86\xab\xed\x9b\xe2\x73\xb8\x6e\x46\x1e\x73\xf9\x71\x3b\x2c\xc7\x55\xb2\x5f\x8e\xab\x7f\xaf\xf1\x7f\x01\x00\x00\xff\xff\x35\x54\xd1\x8a\xc7\x31\x00\x00")

func indexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_indexHtml,
		"index.html",
	)
}

func indexHtml() (*asset, error) {
	bytes, err := indexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.html", size: 12743, mode: os.FileMode(436), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"index.html": indexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"index.html": &bintree{indexHtml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

