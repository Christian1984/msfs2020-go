// Code generated by go-bindata.
// sources:
// html/index.html
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _indexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x5a\xeb\x92\xdb\xb6\x92\xfe\x9f\xa7\x40\x70\x2a\x65\xa9\x42\x82\x77\xdd\x2c\xe9\x24\xf1\x25\xc9\xee\x38\x76\xd9\x4e\x52\xbb\x71\x4a\x05\x91\x18\x8a\x67\x40\x80\x45\x40\xa3\x19\x4f\xcd\x03\xed\x6b\xec\x93\x6d\x01\xa4\x24\x80\xd4\x8c\x35\x67\x7f\x9c\x1c\xff\xf0\x88\x40\xf7\xd7\x17\x34\xba\x81\x26\xe7\x5f\xbf\x7c\xfb\xe2\xe3\x7f\xbd\x7b\x05\x36\xb2\xa4\xcb\xaf\xe6\xcd\x1f\x00\xe6\x1b\x82\x33\xf5\x03\x80\xb9\x2c\x24\x25\xcb\x52\x5c\x8a\xd0\x0f\x7d\x37\xe7\xde\xf5\x65\x5d\xe2\x6a\xee\x35\x33\x0d\x15\x2d\xd8\x15\xa8\x09\x5d\xc0\x22\xe5\x0c\x02\x79\x5b\x91\x05\x2c\x4a\x9c\x13\xaf\x62\x39\x04\x9b\x9a\x5c\x2e\x60\x86\x25\x9e\x1d\x46\x9f\xaf\xb1\x20\xa3\xd8\x29\x7e\xfb\xe1\xed\xfb\x9d\xff\x9f\x3f\xe6\x7c\x01\x7b\x80\x42\xde\x52\x22\x36\x84\xc8\x3d\x0a\x25\xf8\x92\x12\xf9\x0f\xe1\xb5\xbf\x50\x2a\x04\x04\x5e\xcb\x5a\x12\x89\x01\xc3\x25\x59\x40\x5c\x55\x94\xb8\x25\x5f\x17\x94\xb8\x3b\xb2\x76\x71\x55\xb9\x29\xae\xf0\x9a\x12\x08\x52\xce\x24\x61\x72\x01\x6f\x89\x80\x67\x32\x0b\x89\xe5\x56\xb8\x6b\x5c\xbb\x5a\x31\x03\x65\x4d\x71\x7a\x75\x2e\x8e\x76\x9e\xc1\xfc\xdb\xeb\xf7\x6f\x70\xb5\xe7\x16\x69\x5d\x54\x12\x88\x3a\x3d\x65\xed\x3f\x04\x5c\xce\xbd\x86\xe6\x2c\x86\x9a\x4b\x2c\x49\xf6\x06\xd7\x57\xa4\x3e\xc9\xae\x4c\x69\x17\x4d\x92\x1b\xe9\x29\x87\x36\x73\x40\x07\x87\x03\xd6\x3c\xbb\x05\x77\xed\x10\x00\x1b\x52\xe4\x1b\x39\x03\x81\xef\x7f\xf3\xfc\x30\x5a\xe2\x3a\x2f\xd8\x0c\xf8\xc7\xa1\x0a\x67\x59\xc1\x72\x63\xec\xfe\xab\xf6\x47\x07\x32\x2b\x44\x45\xf1\xed\x0c\x5c\x52\x72\x73\x04\x50\x4f\x6e\x56\xd4\x24\x95\x05\x67\x33\x90\x72\xba\x2d\x59\x0f\xec\x6f\x25\xae\x0c\xb0\x35\x4e\xaf\xf2\x9a\x6f\x59\xe6\xa6\x9c\xf2\x7a\x06\xf2\x1a\xdf\x76\x50\xf3\x9a\xef\x66\x20\xe8\x63\x51\x8e\x33\xd7\x06\xac\xb8\x28\x1a\x05\xf0\x5a\x70\xba\x95\xe4\x08\xb6\xe6\x52\xf2\xd2\x32\x9b\x92\x4b\x69\x0d\x7c\x76\x0b\x96\x91\x9b\x19\x08\xe2\x53\xce\x41\x09\x29\x8f\xe3\xad\xca\x3a\xa2\x9e\x3f\x62\x53\x4d\x32\xc3\x24\xce\xa4\x2b\x8a\xcf\x64\x06\x42\x13\x4c\x8f\xef\xda\xf5\x5a\x73\x9a\xf5\xed\xdd\x6c\x33\xd3\xd4\xbd\x56\x81\x09\xa3\xe2\xc2\xc5\xb4\xc8\xd5\x1a\x10\x26\x49\xdd\xd3\x77\xb7\x29\x4c\xb7\x18\x0a\x05\xb6\x7d\x7d\x4b\x2c\x53\x6d\xc5\x44\x85\x19\xba\xc6\x74\x4b\xfa\x3a\xba\x75\x63\x56\xc7\x7f\xa6\x2b\x90\x7f\x9c\xb9\xdf\xe3\x4a\x42\x49\xc5\x6b\xe9\x56\xbc\xda\x56\xa0\x3a\x61\xbd\x8f\x2c\x2f\x9e\x08\xed\x87\x3d\xf2\xb0\x1c\x8a\xd7\x84\x3e\x66\x47\xd8\xd5\x76\xee\xe9\xdd\xb9\xfc\xca\xdc\xe9\xfb\xbd\x09\xb7\x82\x00\x21\xeb\x22\x95\xf0\xf9\xde\x6b\x94\x48\xb0\xd9\x1e\x96\x59\x3d\x96\xb8\xb2\x1f\x55\x26\xe8\x8f\x7c\x6c\xd5\xed\xcf\xfc\x9c\x72\x66\x8e\x6a\x7b\xcc\x81\x9d\xb0\xa6\x29\x66\x64\xd5\x23\xda\xbb\xa3\x3f\x73\xc9\x29\xe5\xbb\x95\xe6\x03\x0b\x70\x89\xa9\x20\xe6\x3c\xc5\x42\xae\x6a\xcd\x0c\x16\xe0\xee\xde\x9c\x13\xd7\xf9\x3b\xc5\xa7\x74\xfc\x20\xeb\x82\xe5\x60\x01\x9e\xcd\xff\x7e\x53\x52\x70\x4d\x6a\x51\x70\xb6\x80\x01\xf2\x21\x20\x2c\xe5\xca\xdd\x0b\xf8\xeb\xc7\xd7\xee\x04\x02\x21\x31\xcb\x30\xe5\x8c\x2c\x20\xe3\xf0\xef\xcb\xb9\xb8\xce\xc1\x4d\x49\x99\x58\xc0\x8d\x94\xd5\xcc\xf3\x76\xbb\x1d\xda\x45\x88\xd7\xb9\x17\xfa\xbe\xef\x89\x6b\x55\xcf\xf4\x7e\x5a\xc0\x30\x9e\xa2\x49\x0c\xc1\xae\xc8\xe4\x46\x3d\x4e\x50\x98\x40\x5b\xec\x52\x57\x03\x55\xfb\x40\x91\x2d\xe0\xfe\x61\x0a\xbd\xe5\xbc\xc2\x72\xa3\x47\xd5\x8f\x64\x1c\xc6\x10\x64\x0b\xf8\x06\x84\xf1\x18\x25\x41\xec\xc7\x4e\x90\x84\x28\xf6\xc3\xd1\x08\x04\xd1\x14\xf9\xc9\x78\x12\x38\xe3\x00\x4d\x7c\x7f\x1a\x8f\x40\x0a\x7c\x34\xf1\xc3\xd1\xc4\x71\x83\x10\xc5\x49\x30\x89\x13\x10\xa0\x28\x8c\xc7\x91\xe3\xc6\x3e\x0a\x93\x91\xe2\xf5\xd1\x24\x89\x15\x55\x9c\xa0\x38\x18\x27\xd3\x29\x70\x23\x34\x8d\xfd\x28\x76\xdc\x38\x42\xe1\x68\x14\x8f\x42\xe0\x46\x01\x0a\x23\x3f\x98\x38\x6e\x18\xa3\x51\xe4\x07\xc1\x34\xd2\xa3\xf1\x24\x8a\x12\xc7\x4d\x50\x14\xfa\xd1\x68\x0c\x5c\x1f\xf9\xa3\x69\xe4\x24\x28\x9c\x04\xd1\x28\x00\x6e\x80\xfc\x20\xf1\x43\x27\x0a\x51\x32\x9d\x44\x93\x89\x1a\x0a\xfc\x78\x1c\x38\x89\x8f\x26\xd1\x68\x14\x86\xe0\x42\x85\xf8\x24\x0e\xc7\xc1\xd8\x09\x92\x18\x45\xe3\x64\x14\x02\xdf\x09\x26\x3e\x0a\xa6\xc9\x38\x01\x14\x04\x81\x8f\x12\xdf\x4f\x26\x8e\x9b\xf8\x28\x9e\x84\xd1\x14\x44\x68\x3a\x8d\xa2\xd0\x99\xf8\x28\x9c\x06\x23\xa5\x53\x88\xfc\x38\x4c\x46\x63\x27\x0c\xd1\x34\x9a\x04\x23\xa5\x53\xe8\x47\x93\x38\x71\x82\x11\x9a\x4c\x47\xd3\x08\xc4\x21\x52\xb2\xc6\xa1\xe3\x06\x01\x4a\xa6\x89\xf6\x85\xef\x4f\x1c\x1f\x05\xd1\x34\x51\x04\xe3\x20\x0a\x02\x27\xf0\xd1\x34\x98\x8c\xa7\x0a\x25\xf1\xa7\xe1\xd4\x71\x15\xca\x24\x0c\x1a\x61\x71\x12\x8d\x63\xc7\x0d\x43\x14\x4d\xa7\x7e\x04\x42\x34\x0a\x82\x28\x74\xdc\x89\x8f\xa2\x24\xf4\x13\x10\x04\x01\x8a\x92\xe9\x34\x71\xe2\x09\x4a\xfc\x51\x10\x28\xac\x71\x14\x4f\x15\x5f\x82\xc6\xe3\x70\x9a\x80\xcf\x10\x5c\x16\x94\xba\xf5\x96\x92\x05\x24\xd7\x84\xf1\x2c\x6b\xc6\x16\x70\xb5\x7a\xf1\xf6\xe2\xed\xfb\xd5\x4a\xc5\x86\x8a\xb4\xe5\xb3\xaf\xba\xdb\x4a\x85\xf9\x0f\x2a\x5d\x82\x05\xb8\x40\xea\xbc\x35\x38\xe6\x13\xf5\xf8\x6b\x4d\x67\x4d\xa8\x93\x5f\xdf\xff\x3c\x30\x4f\x5d\xe2\x3a\xff\xf6\xa6\xa4\x0e\x04\xdf\x9e\xd8\x36\x43\x54\x93\x8a\xe2\x94\x0c\xe0\xdf\xa0\x03\xbf\x09\x23\x68\x0c\x1d\x75\x73\x40\x7b\xd8\x19\x3a\x96\xe0\x0f\x3a\xe3\xfe\x31\x8a\x1d\x30\x8a\xff\xdc\xcf\xdd\x0f\x7b\x99\x41\x89\xfc\x5d\x15\x8b\x7f\xa5\x09\xba\x5a\xfd\xbf\x4c\xf8\xb1\x26\x84\xfd\x2b\x4d\xc8\x95\x02\xe7\x9b\xd0\xfe\xcc\x78\xba\x2d\x09\x93\x88\xb3\x2b\x72\xbb\xad\x54\xbe\xdd\x32\x7d\xbc\x1a\xa8\x78\x94\x43\xa3\x40\x81\xe2\x12\x34\xa3\xe8\x8a\xdc\x82\xc5\x62\x01\xe0\x2b\x91\xe2\x8a\xc0\xa1\x41\x05\x80\xe4\x79\x4e\xc9\xaa\x49\xe4\x83\xe1\xb1\x4c\x1e\xaa\xe1\xa1\xac\xef\xa5\x01\x5e\x11\xb6\x2a\xd8\x2a\xe7\x5c\xf1\x96\xb8\x12\x03\x53\xf8\x35\xae\xc1\xb6\xa6\x60\x01\x74\x32\x16\x6d\x36\x6e\xc8\x51\xca\x4b\x4f\xb1\x78\xdf\x29\x47\x1a\x15\x02\x51\x2c\x0b\xb9\xcd\x08\xf8\x16\x40\xa7\x37\xc9\x59\x6e\xcf\x96\xb8\x42\x39\x91\xff\xcd\x79\x39\x18\xaa\xd1\xcf\xf0\xa0\xc2\xae\x60\x19\xdf\x21\xa5\xe9\x60\x5b\x53\xe7\xd9\x6a\x4d\x31\xbb\x7a\x36\xec\x1d\x56\x0e\x56\x6d\xab\x0c\x4b\xf2\x06\x57\x83\x52\xe4\x96\x2f\xb5\x41\x15\x17\x3a\x66\x28\x96\x17\x2c\x57\x34\x07\x7d\x1d\xa0\x9f\xf6\x0a\x9a\x4e\x6c\xeb\x30\x12\x44\x5e\x34\x8c\x15\x17\x0f\x10\xbc\x57\xe7\xfd\x82\xb3\xef\x59\x4e\x89\x16\xa0\x2e\x74\x2a\xb4\x0e\x31\xa0\xfe\x19\x45\x1a\x55\x5c\xa0\x82\x31\x75\x04\xb8\x51\x15\xf6\x97\x6d\xb9\x26\xb5\x92\xa1\x94\x1b\x22\xc9\x5f\x17\x37\x24\x1b\x8c\x86\x07\xaf\x99\x24\x2a\x6a\x8f\x24\xa6\x56\x9e\x67\x8a\xc9\x95\xab\xb5\x9c\x9f\x3e\xbe\xb9\x50\xeb\x3a\xc7\xcd\xad\xee\xd3\x97\x57\xb8\x55\xe6\xa0\x40\x2b\xf9\x91\x65\xfc\x04\x97\x0d\x92\x9a\x13\x73\x0f\x2f\xa1\xe5\x01\x15\xdb\xe6\xc9\xc3\x5e\x2c\xa0\x11\x2b\xcc\x3e\xf2\x9e\xb3\xef\x3b\x27\xbd\xd3\x31\xf0\xd3\xaf\x2f\xbb\x31\xb0\xd9\x66\x08\xd3\x66\xb9\x2d\x8f\xab\x65\xda\x4f\x3c\xb7\xc8\xdb\xc5\xeb\x51\xb7\xe3\x36\x31\x2e\x6a\x51\x11\x92\xf5\xb1\xdb\x09\x9b\xfc\x9a\xd4\xb2\x48\x31\x5d\x9d\x66\xb2\xa7\x6d\xd6\x4b\x8a\x2b\xd1\xe3\xd0\xa3\x36\xa1\xac\x8b\xb2\x47\xa7\x06\x6d\xb2\x7a\x9b\x65\xa4\x5e\x9d\xa4\x36\xe6\x7a\xfb\x6e\xa7\xb6\x13\x23\x3b\xf0\x3b\x59\x7f\xe0\xe9\x15\x91\x03\xb8\x53\x81\xa4\x62\xa2\xdd\xbe\x94\xa7\x7a\x47\xa0\x0d\x17\x52\x5d\xcb\x55\x78\xcc\x4e\x11\xe8\x13\xe6\xb7\x00\x7a\x3b\x01\x0f\x2b\xbe\x13\x88\x33\x95\x02\xcc\x54\x69\xae\xaa\xe7\xa5\x9c\x09\x4e\x09\xa2\x3c\x57\xe2\x75\x6a\x3b\x02\xdc\x5b\x48\x29\xe5\x82\x9c\x0f\xa5\xc9\x1f\xc2\x2a\x89\x10\x38\xb7\xd0\x48\x37\x85\x96\x42\x9d\x88\xff\xe3\xc3\xdb\x5f\x50\x85\x6b\x41\x06\x04\xa9\x6a\x64\x04\x74\x5f\xa8\x22\x80\x3a\x1f\x19\x64\xf6\x29\xbc\x14\xb9\xb1\x9b\xec\x88\x37\x26\xd4\x26\x53\x77\xe9\xaf\x17\x0b\xb0\x65\x19\xb9\x2c\x18\xc9\xec\x9d\x66\x67\xcc\xa3\xbc\xfb\xa3\xc9\xdd\x0d\x56\xb0\x42\x2a\x86\xae\xad\x9d\xec\xaa\x0e\xcf\xe3\x70\xec\xb8\x01\x1a\x27\x61\x64\xea\xa5\xa8\xb9\x28\xdb\xe0\xb9\x40\x1f\x0b\x4a\x2e\xf0\x2d\xa9\x07\xfb\x93\xff\x9d\xb8\x47\xb2\xa0\x44\x67\x7f\x21\x6b\x42\xa4\xca\x08\xea\x26\x70\xf7\xf9\xde\xbb\xbb\xb9\xf7\xee\x6e\xef\x51\xc5\x72\xe8\x58\xf6\x94\xf8\x46\x65\xa1\x19\x08\x26\x8e\x39\x5c\xb0\x66\x38\x34\x47\x2f\x79\x5d\x62\x39\x03\x46\xbb\xcc\x9c\x16\xdb\x75\xc6\x4b\x5c\x30\x31\x03\x7f\x40\xac\x0f\x5f\xea\xbf\x14\xfe\x79\xf4\x93\xe1\x33\x6d\x56\x45\x18\x2e\xaa\x55\x8a\xd3\x0d\xc9\x56\x6b\x2c\x88\x5a\x81\x33\x2c\x55\x79\x12\xb5\xec\x88\x11\xe9\xe5\x84\xef\xc8\x5a\x03\x79\x82\xd4\xd7\x45\x4a\x3c\x59\x0a\x2f\x40\x3e\xf2\xbd\xbd\xa0\x56\xc2\x77\xaf\xde\x7d\xf8\xf1\x9b\xe8\xfb\xa9\xef\x4f\x83\xe8\xbb\x8a\x9d\xef\xa8\xf8\xa4\xa3\xac\x51\x59\x8a\x19\x90\xf5\x96\x38\x56\x7d\xc9\x88\x24\xa9\x7c\x4f\x64\xc1\x70\x7f\xde\x74\x1f\x0c\x42\xf8\x04\xcf\xcb\x1a\x33\x51\xe1\x9a\x30\xd9\xe0\x3e\xe8\x6f\x21\x71\x49\xd8\x4a\x1f\x8a\x57\xbb\xf6\x60\xfb\x45\x5f\x37\x5c\xba\xc8\x49\xce\x48\xfd\x17\x0f\xaa\xd6\x48\x49\xea\x1a\x17\xec\xa9\x06\x36\x5c\xff\x1e\x26\xee\xb0\x24\xf5\x13\x0d\xd4\x3c\xba\x99\xf5\x17\xb7\x31\xc5\xb5\xe4\xab\x0c\xd7\x57\x0f\x59\xa8\x6a\xa7\xa6\xca\xd6\x6e\xbb\xb1\x85\xab\x6c\xce\x29\x5f\x63\x8a\x84\xa0\xe8\x12\x0b\x49\x6f\x75\x86\x50\x50\x2b\x4c\xe9\x5f\xd8\x6e\xa3\x8b\x77\xcc\x82\xaa\x7a\xc0\x12\x57\x1d\x3d\xa9\x72\x84\xc2\xd5\xc5\xe1\x4f\x53\x6c\xd3\xe4\x9b\xa9\x1a\x63\x0e\x7f\x6e\xcc\xf2\xcd\x31\x2c\x65\x5d\xac\xb7\xaa\x54\xbd\xe0\x4c\xd6\x9c\xce\x9a\xa6\x96\xa5\x9f\xb5\x30\x0d\x8b\x2e\x5e\x69\xc3\x82\x0c\x94\xc1\xdd\xb1\x03\x0d\x9b\x86\x33\x25\x97\x12\x9a\x66\x36\xe4\x08\x67\xd9\xf7\x06\xe3\x03\x47\x6c\x23\xc9\x7f\x82\x40\xe2\x3a\x27\x72\xf1\x09\x36\xd7\x9b\x4f\x10\xe8\xae\xe3\xe2\x13\xfc\x04\x97\x8a\xf4\xfb\x9f\xdf\xe9\xf3\xf3\x53\xc5\xcd\x3c\x7d\x82\x37\xb6\xca\x97\xa4\x7d\xd0\x94\xff\x94\xb0\x43\xe4\xea\x2d\xf9\x25\x41\x2f\x14\xe5\x3f\x2d\x67\xef\x43\xfb\x5c\x90\xf2\xea\x56\xf7\x72\xbf\x24\xfc\x7f\xff\x07\xbc\xad\x88\xba\xf2\x13\xa2\x0e\x32\x4a\x0f\xfd\x3a\x48\xcb\xe4\xb5\x80\xa7\xe2\xf7\xa8\xdd\x47\xae\x0e\x55\xdd\x18\x52\xdb\xf5\x0d\xae\xd4\x11\xc8\xbe\xc9\x40\x4b\x18\x9c\xa9\xe0\x76\x6c\x8a\xc6\xef\xe0\x63\x93\xa9\xe1\xac\x93\xf0\x1f\xa0\x56\x85\xeb\x48\x6b\x54\xc0\xd3\xf4\xbf\xab\x34\x79\xa4\xd7\x59\xb3\x43\xa9\x97\x05\xbc\x54\x09\x6a\xf0\x8b\x72\x25\x78\xc3\x33\x32\x84\x33\x23\x75\x1d\x59\xf6\xa7\x61\xfb\xfc\x73\x4d\x6a\x8a\x6f\x4f\x7b\xe2\x17\x7c\x5d\xe4\xfa\xb0\x8f\x29\x78\xa9\x8e\xb9\xb3\x07\x0e\x4c\x7d\x29\x00\x18\xbb\xb3\xc9\x14\x83\xbd\xcf\x1d\x53\xec\xf0\xf4\x1a\x35\x77\x74\xbd\xc7\x9b\x9f\xea\x62\x69\xe7\x9f\x22\x55\x5b\xdc\xee\xf4\x99\x1e\xaa\xcd\xcb\xfd\x0c\xf8\xa7\xe6\xde\xd6\x85\x7e\x59\x01\x9b\x8c\x65\xe4\x4e\x33\x5d\xb4\x0d\x03\x53\xd1\xce\xd4\xba\x60\xd9\x3b\x75\x71\x1f\x5c\x20\x7d\x81\x1f\xdc\xe1\xad\xe4\xef\x30\x6b\xb3\xd9\xfd\xb0\xd3\x90\x50\x8f\x2f\x9a\x97\x9a\x03\xf3\xe2\xaf\x92\xf5\xb0\x1b\xad\x8d\x94\x77\xf6\x89\xdd\x77\xfc\x9e\x22\xfb\xf7\x12\xa6\xe3\x0e\xcc\x0e\xb8\xeb\x5b\xb5\xe7\x78\xc4\xba\x03\xc9\x99\x56\xee\xcd\xb2\x5f\x62\x1c\x2c\xdb\x83\x0b\x22\x57\x07\x92\xae\xae\x76\x2c\x54\x88\xb3\xc1\xb3\x94\x16\xe9\xd5\x33\xe7\x81\xfb\xdb\x69\x40\xa2\xbc\x45\x99\x75\x57\xb2\x0c\x6c\xa0\x55\x68\xea\x28\x4d\x37\x98\xe5\xe4\x11\x21\xba\xcb\x87\xf4\xcd\x78\xb1\x78\x78\x0f\xf6\x1b\x24\xfb\x9e\x93\x8a\xd5\x81\xdd\xdc\xb5\x1b\x26\x80\x50\x41\xba\x72\xac\x2c\x72\x2e\xb8\x6e\xbb\x9e\x02\x3f\x8f\x5d\xef\xa8\x93\xcd\x1c\xd3\x89\xfd\xb6\xde\xa9\x75\x68\x57\xc1\x90\xdc\x89\xad\xe3\xee\xe8\x2d\x58\x27\x8e\xf2\x4a\xb4\x6f\x39\x17\xa0\xa1\x55\x6b\x7c\xe8\xaa\x4d\x86\x46\x33\xb3\x99\x65\xb9\x31\xfb\xdc\xba\x6f\x9b\xfd\xce\x7d\x53\xc9\x76\x6f\x47\xfa\xa1\x25\x75\x54\xa1\x8f\x70\xe2\x62\xde\xf3\xd2\x01\x77\x43\x6a\xd2\x69\x6c\x1c\xef\xe7\x1d\x2f\xe5\x07\x2f\x75\x0e\xab\x46\xe7\x42\xe8\xe6\x78\x71\x79\x3b\x30\xac\xe8\xa4\x76\x79\x5b\x11\x38\x03\x70\xaf\x04\xec\x94\x16\x8a\x25\x9c\x01\xdd\x03\x79\x4d\x39\xee\xed\xe5\xc3\x1a\x20\x51\xd1\x42\x0e\xa0\x03\x87\x7f\xf8\x7f\x0e\xbb\x30\x2c\x7f\x3a\x4c\xd0\x83\xd9\xbb\xf5\x51\x2c\x7b\x61\x54\x10\xf8\x28\x71\x4e\x06\xef\xd0\x7c\x21\x7f\xec\xe6\xd8\x2d\x95\x9d\x40\x82\xb0\xcc\x1a\x3d\xb1\x8a\x76\x33\xdf\xf0\xf3\xe3\x2d\x53\x33\xe5\x37\x54\x56\x2b\x0f\x36\x63\x0d\x19\x34\xc2\xa9\xbf\x7f\xbf\x84\x94\x71\xf6\x6c\xff\xda\xb8\x8f\x77\xf8\xd5\x79\xaf\xfc\xb5\xf9\xdc\x33\xff\xf0\x62\x04\x67\xd9\xab\x6b\xc2\xe4\x45\x21\x24\x61\xea\x5e\xf4\xf2\xed\x9b\x36\xff\x5f\x70\x9c\x91\x0c\x3a\x8f\xbc\x33\x31\x74\xef\x1c\x3f\x54\xb1\x98\x1d\xe5\xe4\x44\xbe\xa2\x44\xfd\xfc\xe1\xf6\xe7\x6c\x00\x35\x63\xf3\xad\x00\xb4\xa2\xa5\xe2\xe2\x3c\x36\xb7\xe2\xc2\x66\xcd\x4b\x5c\x9d\xc9\xab\x48\x6d\xe6\xc6\x5d\x67\xb2\x37\xc4\x26\xc0\xfd\x43\xd9\xee\x69\x6e\xb1\xbf\xa2\xb0\x35\x14\xdb\x75\x59\xc8\xb3\x99\xdd\x86\xbe\xe3\xa2\xea\x31\xef\x76\x00\xf2\xaa\xe3\xe0\xfd\x0e\x3d\x1f\xe2\xb0\xf1\x4f\xbb\x6a\xb3\xcd\x3a\xfe\x39\x43\xc4\x9e\x64\xa5\xf3\x84\xad\x61\xfb\xa2\xe0\x11\xee\x96\xe2\x14\xf3\xfe\xbd\xc1\x63\xb2\x5b\x92\x53\xec\xf6\x1b\x84\x47\x40\x6c\xc2\x53\x50\xfa\xd5\xc2\x23\x08\x7a\xfe\x14\xa3\xac\x8b\xf2\xb1\xd5\xa9\x8b\xf2\x14\x9b\xf1\xd2\xe1\x11\x6e\x83\xaa\x0f\x72\x6f\x9c\xf7\x1e\x7c\x41\x7a\x68\x65\x1f\x12\x52\xfb\xcb\xfc\x4a\x6f\xee\xed\x3f\xca\x9c\xaf\x79\x76\xdb\x7e\xb8\x97\x15\xd7\xfa\xeb\x91\xcd\x36\x3b\x7c\xaf\x37\x17\x15\x66\xcb\xef\x0f\xcb\xa6\x9f\x35\x55\x67\x9d\x40\x4a\xb1\x10\x0b\xd8\x3c\x2d\xfd\xb9\xa7\x39\xdb\x3f\x36\xda\x21\x00\x0d\x34\x3b\xe2\x9e\x80\xf6\xd3\x3e\x1e\x8f\x60\x76\x00\x3e\x01\xeb\x37\xf4\xa1\x6b\xe6\xc9\x48\x7a\x02\xe4\xeb\x26\xce\x8e\x80\x66\x60\x3d\x01\xe7\xa3\x0e\x9c\x23\x8c\x11\x22\x4f\x40\x79\x8f\xba\x38\xfd\x88\x3b\x03\x6e\xee\x65\xc5\x75\x27\x6a\x54\xba\x5f\x76\x27\x9a\x1e\x05\xdc\x7f\x8d\xc9\x38\x23\xcf\xe1\x72\x1f\xc6\x07\x5e\xb3\x54\x2d\x0f\xa1\x3c\xaf\x96\xf3\x4d\xd4\x25\xd0\x45\x69\x39\xf7\x36\xd1\x72\xee\x55\x36\xf5\x7a\x2b\x25\x67\x3d\x0e\x5d\x8a\x00\x67\xfa\x72\xb4\x80\x27\x3f\x14\x78\xde\x74\xa6\x40\xc1\x80\xf5\x96\xb7\x81\x3c\x5b\x54\x5b\xb6\x8e\xc2\xba\x1b\x55\xa9\xde\xc7\x6c\xfd\xd6\xf5\x4b\xa7\x56\xd9\x1a\x34\x5f\xff\x5d\xf2\xba\x4b\xa7\xab\xca\xf2\xc7\x77\x1f\x66\x73\x4f\x13\x2d\xe7\x05\xab\xb6\xd2\xf8\x26\x17\x9e\x80\x6f\xd8\x7a\x86\x3e\x2c\x06\x53\x09\x8f\x9b\xf9\x69\xb2\x0e\x55\xeb\x41\xcf\x36\x00\xcd\xc3\x49\x88\xb6\xf8\x1a\xae\xb6\x6f\x0b\xcf\xe1\x72\x3f\xf2\x25\x97\x1f\xc2\x76\xee\x35\xf9\x70\xee\x35\x9f\xaf\xff\x5f\x00\x00\x00\xff\xff\x85\xe1\x48\x22\xd6\x2e\x00\x00")

func indexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_indexHtml,
		"index.html",
	)
}

func indexHtml() (*asset, error) {
	bytes, err := indexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.html", size: 11990, mode: os.FileMode(436), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"index.html": indexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"index.html": &bintree{indexHtml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

